import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Footer from './Footer';
import Navbar from './Navbar';

const Cardblock = () => {
  const [blogPosts, setBlogPosts] = useState([]);
  const [updateId, setUpdateId] = useState(null);
  const [title, setTitle] = useState('');
  const [author, setAuthor] = useState('');
  const [content, setContent] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [postsPerPage] = useState(12); // Number of posts per page
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleRemoveBlogPost = async (id) => {
    try {
      await axios.delete(`http://localhost:5000/blogposts/${id}`);
      setBlogPosts(blogPosts.filter(post => post._id !== id));
    } catch (error) {
      console.error('Error removing blog post:', error);
    }
  };

  const handleUpdateBlogPost = async (id) => {
    try {
      const response = await axios.put(`http://localhost:5000/blogposts/${id}`, {
        title,
        author,
        content
      });
      console.log('Blog post updated successfully:', response.data);
      setUpdateId(null);
    } catch (error) {
      console.error('Error updating blog post:', error);
      setError('Error updating blog post. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get(`http://localhost:5000/getbgposts?title=${searchQuery}`);
        setBlogPosts(response.data);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };
    fetchData();
  }, [searchQuery, updateId]);

  const handleEdit = (id, title, author, content) => {
    setUpdateId(id);
    setTitle(title);
    setAuthor(author);
    setContent(content);
  };

  // Get current posts
  const indexOfLastPost = currentPage * postsPerPage;
  const indexOfFirstPost = indexOfLastPost - postsPerPage;
  const currentPosts = blogPosts.slice(indexOfFirstPost, indexOfLastPost);

  // Change page
  const paginate = (pageNumber) => setCurrentPage(pageNumber);

  return (
    <div id="1">
      <Navbar/>
      <div>
          

      <div class="lg:hidden">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="h-6 w-6 cursor-pointer"
        >
          <line x1="4" y1="12" x2="20" y2="12"></line>
          <line x1="4" y1="6" x2="20" y2="6"></line>
          <line x1="4" y1="18" x2="20" y2="18"></line>
        </svg>
      </div>
    
  <div class="mx-auto max-w-7xl px-2">
    <div class="flex flex-col space-y-8 pb-10  px-4 pt-12 md:pt-24">
      <p class="text-3xl font-bold text-gray-900 md:text-5xl md:leading-10">
        Resources and insights
      </p>
      <p class="max-w-4xl text-base text-gray-600 md:text-xl">
        Lorem ipsum dolor sit amet consectetur adipisicing elit. Tempore
        veritatis voluptates neque itaque repudiandae sint, explicabo assumenda
        quam ratione placeat?
      </p>
      <div class="mt-6 flex w-full items-center space-x-2 md:w-1/3">
        <input
          className="flex h-10 w-full rounded-full border border-black/30 bg-transparent px-3 py-2 text-sm placeholder:text-gray-600 focus:outline-none focus:ring-1 focus:ring-black/30 focus:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50"
          type="text"
          placeholder="Search Topics"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
        {/* Map through currentPosts instead of blogPosts */}
        {currentPosts.map(post => {
          // Your existing code for rendering posts
        })}
        {/* Pagination */}
        <div className="w-full px-5 border-t border-gray-300">
          <div className="mt-2 flex items-center justify-between">
            <div className="hidden md:block">
              <p>
                Showing <strong>{indexOfFirstPost + 1}</strong> to{' '}
                <strong>{Math.min(indexOfLastPost, blogPosts.length)}</strong> of{' '}
                <strong>{blogPosts.length}</strong> results
              </p>
            </div>
            <div className="space-x-2">
              <button
                type="button"
                onClick={() => paginate(currentPage - 1)}
                disabled={currentPage === 1}
                className="rounded-md bg-black px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-black/80 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black"
              >
                ← Previous
              </button>
              <button
                type="button"
                onClick={() => paginate(currentPage + 1)}
                disabled={indexOfLastPost >= blogPosts.length}
                className="rounded-md bg-black px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-black/80 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-black"
              >
                Next →
              </button>
            </div>
          </div>
        </div>
        {/* Your existing HTML code */}
        {/* ... */}
      </div>
      <Footer/>
    </div>
  );
};

export default Cardblock;
